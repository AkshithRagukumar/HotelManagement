package dev.akshith;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import dev.akshith.model.Room;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.table.DefaultTableModel;

/**
 * Akshith Ragukumar hotel management User homepage CSIS 505
 *
 * @author Akshith
 */
public class UserPage extends javax.swing.JFrame {

    /**
     * Creates new form UserFrame
     */
    public UserPage() {
        initComponents();
        jLabelUserId.setVisible(false);
        selectRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{"Standard", "Deluxe", "Luxury"}));
        jTxtDates.setText("Enter Date (YYYY-MM-DD)");
        jTxtNumberOfRooms.setText("Number of Rooms");
        jTxtDates.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (jTxtDates.getText().equals("Enter Date (YYYY-MM-DD)")) {
                    jTxtDates.setText("");
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (jTxtDates.getText().isEmpty()) {
                    jTxtDates.setText("Enter Date (YYYY-MM-DD)");
                }
            }
        });

        jTxtNumberOfRooms.addFocusListener(new java.awt.event.FocusAdapter() {
            @Override
            public void focusGained(java.awt.event.FocusEvent evt) {
                if (jTxtNumberOfRooms.getText().equals("Number of Rooms")) {
                    jTxtNumberOfRooms.setText("");
                }
            }

            @Override
            public void focusLost(java.awt.event.FocusEvent evt) {
                if (jTxtNumberOfRooms.getText().isEmpty()) {
                    jTxtNumberOfRooms.setText("Number of Rooms");
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHotelName = new javax.swing.JPanel();
        jLabelHotelName = new javax.swing.JLabel();
        jButtonHome = new javax.swing.JButton();
        jButtonSupport = new javax.swing.JButton();
        jButtonWriteReview = new javax.swing.JButton();
        jButtonLogout = new javax.swing.JButton();
        jPanelCheckAvailability = new javax.swing.JPanel();
        selectRoomComboBox = new javax.swing.JComboBox<>();
        jTxtDates = new javax.swing.JTextField();
        jTxtNumberOfRooms = new javax.swing.JTextField();
        Search = new javax.swing.JButton();
        jLabelCheckAvailability = new javax.swing.JLabel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonBook = new javax.swing.JButton();
        jLabelWelcomeLabel = new javax.swing.JLabel();
        jLabelEmail = new javax.swing.JLabel();
        jLabelUserId = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        bookingsTable = new javax.swing.JTable();
        jButtonRefresh = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(153, 153, 153));
        setForeground(java.awt.Color.gray);

        jPanelHotelName.setBackground(new java.awt.Color(0, 102, 153));
        jPanelHotelName.setMinimumSize(new java.awt.Dimension(100, 100));

        jLabelHotelName.setBackground(new java.awt.Color(255, 255, 255));
        jLabelHotelName.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelHotelName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHotelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHotelName.setLabelFor(jPanelHotelName);
        jLabelHotelName.setText("Akshith Ragukumar Hotel");

        javax.swing.GroupLayout jPanelHotelNameLayout = new javax.swing.GroupLayout(jPanelHotelName);
        jPanelHotelName.setLayout(jPanelHotelNameLayout);
        jPanelHotelNameLayout.setHorizontalGroup(
            jPanelHotelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHotelNameLayout.createSequentialGroup()
                .addGap(263, 263, 263)
                .addComponent(jLabelHotelName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelHotelNameLayout.setVerticalGroup(
            jPanelHotelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHotelNameLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabelHotelName)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButtonHome.setBackground(new java.awt.Color(0, 102, 153));
        jButtonHome.setForeground(new java.awt.Color(255, 255, 255));
        jButtonHome.setText("Home");
        jButtonHome.setEnabled(false);
        jButtonHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonHomeActionPerformed(evt);
            }
        });

        jButtonSupport.setBackground(new java.awt.Color(0, 102, 153));
        jButtonSupport.setForeground(new java.awt.Color(255, 255, 255));
        jButtonSupport.setText("Support");
        jButtonSupport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSupportActionPerformed(evt);
            }
        });

        jButtonWriteReview.setBackground(new java.awt.Color(0, 102, 153));
        jButtonWriteReview.setForeground(new java.awt.Color(255, 255, 255));
        jButtonWriteReview.setText("Write a Review");
        jButtonWriteReview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonWriteReviewActionPerformed(evt);
            }
        });

        jButtonLogout.setBackground(new java.awt.Color(0, 102, 153));
        jButtonLogout.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jPanelCheckAvailability.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        selectRoomComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jTxtDates.setText("Dates");

        jTxtNumberOfRooms.setText("Number of Rooms");

        Search.setBackground(new java.awt.Color(0, 102, 153));
        Search.setForeground(new java.awt.Color(255, 255, 255));
        Search.setText("Search");
        Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchActionPerformed(evt);
            }
        });

        jLabelCheckAvailability.setText("Check availability");

        jButtonBook.setBackground(new java.awt.Color(0, 102, 153));
        jButtonBook.setForeground(new java.awt.Color(255, 255, 255));
        jButtonBook.setText("Book");
        jButtonBook.setEnabled(false);
        jButtonBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBookActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanelCheckAvailabilityLayout = new javax.swing.GroupLayout(jPanelCheckAvailability);
        jPanelCheckAvailability.setLayout(jPanelCheckAvailabilityLayout);
        jPanelCheckAvailabilityLayout.setHorizontalGroup(
            jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelCheckAvailabilityLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelCheckAvailability)
                .addGap(256, 256, 256))
            .addGroup(jPanelCheckAvailabilityLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanelCheckAvailabilityLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabelStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(jTxtDates, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jTxtNumberOfRooms, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonBook)
                    .addComponent(Search))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelCheckAvailabilityLayout.setVerticalGroup(
            jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelCheckAvailabilityLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabelCheckAvailability)
                .addGap(18, 18, 18)
                .addGroup(jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectRoomComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtDates, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTxtNumberOfRooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Search))
                .addGap(18, 18, 18)
                .addGroup(jPanelCheckAvailabilityLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonBook)
                    .addComponent(jLabelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        jLabelWelcomeLabel.setText("Welcome");

        jLabelUserId.setToolTipText("");

        bookingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Booking Date", "Room Type", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bookingsTable);

        jButtonRefresh.setText("Refresh*");
        jButtonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRefreshActionPerformed(evt);
            }
        });

        jLabel2.setText("* Click refresh to view your bookings");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHotelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(102, Short.MAX_VALUE)
                        .addComponent(jPanelCheckAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabelWelcomeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelEmail)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonSupport)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonWriteReview)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButtonLogout)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabelUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(160, 160, 160)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(172, 172, 172)
                                .addComponent(jButtonRefresh))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelHotelName, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonHome)
                    .addComponent(jButtonSupport)
                    .addComponent(jButtonWriteReview)
                    .addComponent(jButtonLogout)
                    .addComponent(jLabelWelcomeLabel)
                    .addComponent(jLabelEmail))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelUserId, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jPanelCheckAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRefresh)
                    .addComponent(jLabel2))
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonHomeActionPerformed
        new UserPage().setVisible(true); // Navigate to HomePage
        jLabelStatus.setText("");
        this.dispose();
    }//GEN-LAST:event_jButtonHomeActionPerformed

    private void jButtonSupportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSupportActionPerformed
        SupportPage supportPage = new SupportPage();
        supportPage.jLabelUserId.setText(jLabelUserId.getText());
        supportPage.jLabelEmail.setText(jLabelEmail.getText());
        supportPage.setVisible(true); // Reload SupportPage
        this.dispose();
    }//GEN-LAST:event_jButtonSupportActionPerformed

    private void jButtonWriteReviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonWriteReviewActionPerformed
        ReviewPage reviewPage = new ReviewPage();
        reviewPage.jLabelUserId.setText(jLabelUserId.getText());
        reviewPage.jLabelEmail.setText(jLabelEmail.getText());
        reviewPage.setVisible(true); // Navigate to ReviewPage
        this.dispose();
    }//GEN-LAST:event_jButtonWriteReviewActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed
        new LoginPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchActionPerformed
        String roomType = selectRoomComboBox.getSelectedItem().toString(); // Get selected room type
        String date = jTxtDates.getText(); // Get the entered date
        String requestedNumberOfRooms = jTxtNumberOfRooms.getText(); // Get the entered number of Rooms

        // Input validation
        if (roomType.isEmpty() || date.isEmpty() || requestedNumberOfRooms.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in all fields.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int numRooms;
        try {
            numRooms = Integer.parseInt(requestedNumberOfRooms); // Validate number of rooms as integer
            if (numRooms <= 0) {
                JOptionPane.showMessageDialog(this, "Number of rooms must be greater than 0.", "Validation Error", JOptionPane.WARNING_MESSAGE);
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Number of rooms must be a valid integer.", "Validation Error", JOptionPane.WARNING_MESSAGE);
            return;
        }

        jButtonBook.setEnabled(false);
        int availableRooms = 0;
        Room room = new Room();
        // Query to check room bookingStatusMessage
        String query = "SELECT * FROM Rooms WHERE type = ? AND AVAILABLE_ROOMS > ?";
        try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query)) {
            stmt.setString(1, roomType);
            stmt.setInt(2, numRooms);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                room.setRoomId(rs.getInt("ROOM_ID"));
                room.setTotalRooms(rs.getInt("TOTAL_ROOMS"));
                room.setType(roomType);
                room.setAvailableRooms(rs.getInt("AVAILABLE_ROOMS"));
                break;
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
        if (room.getAvailableRooms() > 0) {
            jButtonBook.setEnabled(true);
        }
        jLabelStatus.setText("Available rooms: " + room.getAvailableRooms());
    }//GEN-LAST:event_SearchActionPerformed

    private void jButtonBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBookActionPerformed

        String roomType = selectRoomComboBox.getSelectedItem().toString(); // Get selected room type
        String date = jTxtDates.getText(); // Get the entered date
        int requestedNumberOfRooms = Integer.parseInt(jTxtNumberOfRooms.getText()); // Get the entered number of Rooms

        // Query to check room bookingStatusMessage
        String query = "SELECT * FROM Rooms WHERE type = ? AND AVAILABLE_ROOMS > ?";
        try (Connection connection = DatabaseConnection.connect()) {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setString(1, roomType);
            stmt.setInt(2, requestedNumberOfRooms);
            ResultSet rs = stmt.executeQuery();

            Room room = new Room();
            while (rs.next()) {
                room.setRoomId(rs.getInt("ROOM_ID"));
                room.setTotalRooms(rs.getInt("TOTAL_ROOMS"));
                room.setType(roomType);
                room.setAvailableRooms(rs.getInt("AVAILABLE_ROOMS"));
                break;
            }

            jButtonBook.setEnabled(false);
            String bookingStatusMessage;
            if (room.getAvailableRooms() > 0) {
                int availableAfterBooking = room.getAvailableRooms() - requestedNumberOfRooms;
                String updateQuery = "UPDATE Rooms SET AVAILABLE_ROOMS = ? WHERE type = ?";
                stmt = connection.prepareStatement(updateQuery);
                stmt.setInt(1, availableAfterBooking);
                stmt.setString(2, roomType);
                int rowsUpdated = stmt.executeUpdate();
                bookingStatusMessage = "Booking ";
                if (rowsUpdated > 0) {
                    String updateBookingQuery = "INSERT INTO BOOKINGS (USER_ID, ROOM_ID, BOOKING_DATE, STATUS) VALUES (?, ?, ?, ?)";
                    stmt = connection.prepareStatement(updateBookingQuery);
                    int userId = Integer.parseInt(jLabelUserId.getText());
                    stmt.setInt(1, userId);
                    stmt.setInt(2, room.getRoomId());
                    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                    java.sql.Date bookingDate = new java.sql.Date(sdf.parse(date).getTime());
                    stmt.setDate(3, bookingDate);
                    stmt.setString(4, "Confirmed");
                    int bookingRowsUpdated = stmt.executeUpdate();
                    if (bookingRowsUpdated > 0) {
                        bookingStatusMessage += "successful!";
                    } else {
                        bookingStatusMessage += "failed!";
                    }
                } else {
                    bookingStatusMessage += "failed!";
                }
            } else {
                bookingStatusMessage = "Something went wrong! Try again!";
            }
            jLabelStatus.setText(bookingStatusMessage);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            System.out.println(e);
        }

        // disable again after booking
        jButtonBook.setEnabled(false);
        refreshBookingTable();
    }//GEN-LAST:event_jButtonBookActionPerformed

    private void jButtonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRefreshActionPerformed
        refreshBookingTable();
    }//GEN-LAST:event_jButtonRefreshActionPerformed

    /**
     * @param args the command line arguments
     */        //</editor-fold>
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Search;
    private javax.swing.JTable bookingsTable;
    private javax.swing.JButton jButtonBook;
    private javax.swing.JButton jButtonHome;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonRefresh;
    private javax.swing.JButton jButtonSupport;
    private javax.swing.JButton jButtonWriteReview;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabelCheckAvailability;
    public javax.swing.JLabel jLabelEmail;
    private javax.swing.JLabel jLabelHotelName;
    private javax.swing.JLabel jLabelStatus;
    public javax.swing.JLabel jLabelUserId;
    private javax.swing.JLabel jLabelWelcomeLabel;
    private javax.swing.JPanel jPanelCheckAvailability;
    private javax.swing.JPanel jPanelHotelName;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTxtDates;
    private javax.swing.JTextField jTxtNumberOfRooms;
    private javax.swing.JComboBox<String> selectRoomComboBox;
    // End of variables declaration//GEN-END:variables

    private void refreshBookingTable() {
        DefaultTableModel model = (DefaultTableModel) bookingsTable.getModel();
        model.setRowCount(0); // Clear existing rows
        if (jLabelUserId.getText().isEmpty()) {
            return;
        }
        int userId = Integer.parseInt(jLabelUserId.getText());

//        String query = "SELECT room.type, booking.booking_date, booking.status FROM BOOKINGS booking WHERE USER_ID = ?";
        String query = "SELECT (select type from ROOMS WHERE room_id = booking.room_id) AS \"type\", booking.booking_date, booking.status FROM BOOKINGS booking WHERE USER_ID = ?";
        try (Connection connection = DatabaseConnection.connect()) {
            PreparedStatement stmt = connection.prepareStatement(query);
            stmt.setInt(1, userId);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                var a = rs.getString("booking_date");
                var b = rs.getString("type"); 
                var c = rs.getString("status");
                model.addRow(new Object[]{rs.getString("booking_date"), rs.getString("type"), rs.getString("status")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching room data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }
}
