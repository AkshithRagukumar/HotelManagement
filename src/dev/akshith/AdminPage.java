package dev.akshith;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.table.DefaultTableModel;

/**
 * Akshith Ragukumar hotel management Admin page CSIS 505
 *
 * @author Akshith
 */
public class AdminPage extends javax.swing.JFrame {

    /**
     * Creates new form AdminPortal
     */
    public AdminPage() {
        initComponents();
        refreshRoomTable();
        refreshTicketTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelHotelName = new javax.swing.JPanel();
        jLabelHotelName = new javax.swing.JLabel();
        jLabelAdminPortal = new javax.swing.JLabel();
        jPanelManageRoom = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableManageRooms = new javax.swing.JTable();
        jButtonRemove = new javax.swing.JButton();
        jButtonAdd = new javax.swing.JButton();
        jLabelManageRooms = new javax.swing.JLabel();
        jButtonLogout = new javax.swing.JButton();
        jPanelManageSupportTicket = new javax.swing.JPanel();
        jButtonResolve = new javax.swing.JButton();
        jLabelSupportTickets = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableSupportTicket = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelHotelName.setBackground(new java.awt.Color(0, 102, 153));

        jLabelHotelName.setBackground(new java.awt.Color(255, 255, 255));
        jLabelHotelName.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        jLabelHotelName.setForeground(new java.awt.Color(255, 255, 255));
        jLabelHotelName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelHotelName.setText("Akshith Ragukumar Hotel");

        javax.swing.GroupLayout jPanelHotelNameLayout = new javax.swing.GroupLayout(jPanelHotelName);
        jPanelHotelName.setLayout(jPanelHotelNameLayout);
        jPanelHotelNameLayout.setHorizontalGroup(
            jPanelHotelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelHotelNameLayout.createSequentialGroup()
                .addContainerGap(263, Short.MAX_VALUE)
                .addComponent(jLabelHotelName)
                .addGap(265, 265, 265))
        );
        jPanelHotelNameLayout.setVerticalGroup(
            jPanelHotelNameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelHotelNameLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabelHotelName)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jLabelAdminPortal.setText("Admin Portal");

        jPanelManageRoom.setBackground(new java.awt.Color(153, 153, 153));

        jTableManageRooms.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(false), "Standard", null, null},
                { new Boolean(false), "Deluxe", null, null},
                { new Boolean(false), "Luxury", null, null}
            },
            new String [] {
                "Select", "Type", "Total", "Available"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableManageRooms);
        if (jTableManageRooms.getColumnModel().getColumnCount() > 0) {
            jTableManageRooms.getColumnModel().getColumn(0).setPreferredWidth(15);
        }

        jButtonRemove.setBackground(new java.awt.Color(0, 102, 153));
        jButtonRemove.setForeground(new java.awt.Color(255, 255, 255));
        jButtonRemove.setText("Remove");
        jButtonRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveActionPerformed(evt);
            }
        });

        jButtonAdd.setBackground(new java.awt.Color(0, 102, 153));
        jButtonAdd.setForeground(new java.awt.Color(255, 255, 255));
        jButtonAdd.setText("Add");
        jButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddActionPerformed(evt);
            }
        });

        jLabelManageRooms.setText("Manage Rooms");

        javax.swing.GroupLayout jPanelManageRoomLayout = new javax.swing.GroupLayout(jPanelManageRoom);
        jPanelManageRoom.setLayout(jPanelManageRoomLayout);
        jPanelManageRoomLayout.setHorizontalGroup(
            jPanelManageRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelManageRoomLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanelManageRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelManageRoomLayout.createSequentialGroup()
                        .addComponent(jLabelManageRooms)
                        .addGap(154, 154, 154)
                        .addComponent(jButtonAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonRemove))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 650, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanelManageRoomLayout.setVerticalGroup(
            jPanelManageRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManageRoomLayout.createSequentialGroup()
                .addContainerGap(13, Short.MAX_VALUE)
                .addGroup(jPanelManageRoomLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonRemove)
                    .addComponent(jButtonAdd)
                    .addComponent(jLabelManageRooms))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        jButtonLogout.setBackground(new java.awt.Color(0, 102, 153));
        jButtonLogout.setForeground(new java.awt.Color(255, 255, 255));
        jButtonLogout.setText("Logout");
        jButtonLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLogoutActionPerformed(evt);
            }
        });

        jPanelManageSupportTicket.setBackground(new java.awt.Color(153, 153, 153));

        jButtonResolve.setBackground(new java.awt.Color(0, 102, 153));
        jButtonResolve.setForeground(new java.awt.Color(255, 255, 255));
        jButtonResolve.setText("Resolve");
        jButtonResolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonResolveActionPerformed(evt);
            }
        });

        jLabelSupportTickets.setText("Support TIckets");

        jTableSupportTicket.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Boolean(false), null, null, null, null, null},
                { new Boolean(false), null, null, null, null, null},
                { new Boolean(false), null, null, null, null, null},
                { new Boolean(false), null, null, null, null, null}
            },
            new String [] {
                "Select", "ID", "Name", "Email", "Title", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableSupportTicket.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTableSupportTicket);
        if (jTableSupportTicket.getColumnModel().getColumnCount() > 0) {
            jTableSupportTicket.getColumnModel().getColumn(0).setResizable(false);
            jTableSupportTicket.getColumnModel().getColumn(0).setPreferredWidth(15);
            jTableSupportTicket.getColumnModel().getColumn(1).setPreferredWidth(15);
        }

        javax.swing.GroupLayout jPanelManageSupportTicketLayout = new javax.swing.GroupLayout(jPanelManageSupportTicket);
        jPanelManageSupportTicket.setLayout(jPanelManageSupportTicketLayout);
        jPanelManageSupportTicketLayout.setHorizontalGroup(
            jPanelManageSupportTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManageSupportTicketLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanelManageSupportTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                    .addGroup(jPanelManageSupportTicketLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabelSupportTickets)
                        .addGap(217, 217, 217)
                        .addComponent(jButtonResolve)))
                .addGap(29, 29, 29))
        );
        jPanelManageSupportTicketLayout.setVerticalGroup(
            jPanelManageSupportTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanelManageSupportTicketLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanelManageSupportTicketLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonResolve)
                    .addComponent(jLabelSupportTickets))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelHotelName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelAdminPortal)
                .addGap(290, 290, 290)
                .addComponent(jButtonLogout)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanelManageRoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanelManageSupportTicket, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanelHotelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonLogout)
                    .addComponent(jLabelAdminPortal))
                .addGap(18, 18, 18)
                .addComponent(jPanelManageRoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanelManageSupportTicket, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTableManageRooms.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 0);
            if (isSelected != null && isSelected) {
                String roomType = model.getValueAt(i, 1).toString();
                // Query to decrement room counts for the selected type
                String query = "UPDATE Rooms SET total_rooms = total_rooms - 1, available_rooms = available_rooms - 1 WHERE type = ? AND total_rooms > 0 AND available_rooms > 0";
                try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query)) {
                    stmt.setString(1, roomType);

                    int rows = stmt.executeUpdate();
                    if (rows > 0) {
                        JOptionPane.showMessageDialog(this, "Room removed for type: " + roomType, "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(this, "Cannot remove more rooms for type: " + roomType, "Warning", JOptionPane.WARNING_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        refreshRoomTable();

    }//GEN-LAST:event_jButtonRemoveActionPerformed

    private void jButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTableManageRooms.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 0);
            if (isSelected != null && isSelected) {
                String roomType = model.getValueAt(i, 1).toString();
                // Query to increment room counts for the selected type
                String query = "UPDATE Rooms SET total_rooms = total_rooms + 1, available_rooms = available_rooms + 1 WHERE type = ?";
                try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query)) {
                    stmt.setString(1, roomType);

                    int rows = stmt.executeUpdate();
                    if (rows > 0) {
                        JOptionPane.showMessageDialog(this, "Room added for type: " + roomType, "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        refreshRoomTable();


    }//GEN-LAST:event_jButtonAddActionPerformed

    private void jButtonLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLogoutActionPerformed

        new LoginPage().setVisible(true);
        this.dispose();

    }//GEN-LAST:event_jButtonLogoutActionPerformed

    private void jButtonResolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonResolveActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTableSupportTicket.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            Boolean isSelected = (Boolean) model.getValueAt(i, 0);
            if (isSelected != null && isSelected) {
                int ticketId = Integer.parseInt(model.getValueAt(i, 1).toString());
                // Query to update the ticket status to Resolved
                String query = "UPDATE Support_Tickets SET status = 'Resolved' WHERE ticket_id = ?";
                try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query)) {
                    stmt.setInt(1, ticketId);

                    int rows = stmt.executeUpdate();
                    if (rows > 0) {
                        JOptionPane.showMessageDialog(this, "Resolved Ticket ID: " + ticketId, "Success", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        refreshTicketTable();


    }//GEN-LAST:event_jButtonResolveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AdminPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AdminPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAdd;
    private javax.swing.JButton jButtonLogout;
    private javax.swing.JButton jButtonRemove;
    private javax.swing.JButton jButtonResolve;
    private javax.swing.JLabel jLabelAdminPortal;
    private javax.swing.JLabel jLabelHotelName;
    private javax.swing.JLabel jLabelManageRooms;
    private javax.swing.JLabel jLabelSupportTickets;
    private javax.swing.JPanel jPanelHotelName;
    private javax.swing.JPanel jPanelManageRoom;
    private javax.swing.JPanel jPanelManageSupportTicket;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTableManageRooms;
    private javax.swing.JTable jTableSupportTicket;
    // End of variables declaration//GEN-END:variables

    private void refreshRoomTable() {
        DefaultTableModel model = (DefaultTableModel) jTableManageRooms.getModel();
        model.setRowCount(0); // Clear existing rows

        String query = "SELECT type, total_rooms, available_rooms FROM Rooms";
        try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                model.addRow(new Object[]{false, rs.getString("type"), rs.getInt("total_rooms"), rs.getInt("available_rooms")});
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching room data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void refreshTicketTable() {
        DefaultTableModel model = (DefaultTableModel) jTableSupportTicket.getModel();
        model.setRowCount(0); // Clear existing rows

        String query = "SELECT ticket_id, name, email, title, status FROM Support_Tickets ORDER BY STATUS";
        try (Connection connection = DatabaseConnection.connect(); PreparedStatement stmt = connection.prepareStatement(query); ResultSet rs = stmt.executeQuery()) {

            System.out.println("Executing query: " + query);
            boolean hasData = false;

            while (rs.next()) {
                hasData = true;
                System.out.println("Fetched Ticket: " + rs.getInt("ticket_id"));
                model.addRow(new Object[]{
                    false,
                    rs.getInt("ticket_id"),
                    rs.getString("name"),
                    rs.getString("email"),
                    rs.getString("title"),
                    rs.getString("status")
                });
            }

            if (!hasData) {
                System.out.println("No open support tickets found.");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error fetching ticket data: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

}
